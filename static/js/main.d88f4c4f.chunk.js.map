{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","Cardlist","robots","map","robot","Searchbox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","border","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gNAkBeA,EAhBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAGzB,OAEC,sBAAKC,UAAU,mDAAf,UACK,qBAAKC,IAAG,+BAA0BJ,EAA1B,kBAA8CK,IAAI,YAC1D,oBAAIF,UAAU,KAAd,SAAoBF,IACpB,oBAAIE,UAAU,YAAd,SAA2BD,QCKnBI,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACA,qBAAKJ,UAAU,gCAAf,SACGI,EAAOC,KAAK,SAAAC,GAAK,OAAI,cAAC,EAAD,CAAqBT,GAAIS,EAAMT,GAAIC,KAAMQ,EAAMR,KAAMC,MAAOO,EAAMP,OAAvDO,EAAMT,UCQ5BU,G,MAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEnB,OAEC,qBAAKR,UAAU,MAAf,SACC,uBAAOS,SAAUD,EAAcE,KAAK,OAAOC,YAAY,wBCM3CC,G,MAZA,SAACC,GAEf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAQ,QAASC,OAAQ,0BAA5D,SACEJ,EAAMK,a,4BC0BKC,E,kDA3Bd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,UAAU,GAHE,E,8DAOIC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SAIb,oBAAIrB,UAAY,KAAhB,2DAGSwB,KAAKX,MAAMK,a,GAtBIQ,aCsFbC,MA7Ef,WAAe,MAYcC,mBAAS,IAZvB,mBAYPxB,EAZO,KAYCyB,EAZD,OAawBD,mBAAS,IAbjC,mBAaPE,EAbO,KAaMC,EAbN,KAwBdC,qBAAU,WACTC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIR,EAAUQ,QACxB,IASF,IAMKC,EAAiBlC,EAAOmC,QAAO,SAACjC,GAClC,OAAOA,EAAMR,KAAK0C,cAAcC,SAASX,EAAYU,kBAKvD,OAEE,qBAAKxC,UAAW,KAAhB,SAEKI,EAAOsC,OAOT,sBAAK1C,UAAW,KAAhB,UACA,oBAAIA,UAAU,SAAd,sBACA,cAAC,EAAD,CAAWQ,aAzBM,SAACmC,GAAWZ,EAAeY,EAAMC,OAAOC,UA0BzD,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzC,OAAQkC,WAVpB,qBAAKtC,UAAY,yBAAjB,SACC,kDCxDY8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.d88f4c4f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n\t\r\n\treturn (\r\n\r\n\t\t<div className=\"tc w5 h10 ma2 ba bw1 b--purple br3 shadow-3 grow\">\r\n\t\t\t    <img src={`https://robohash.org/${id}.jpg?bgset=bg1`} alt=\"Robocop\" />\r\n\t\t\t    <h1 className=\"f3\">{name}</h1>\r\n\t\t\t    <h2 className=\"f6 normal\">{email}</h2>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'; \r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\t\treturn (\r\n\t\t<div className='flex flex-wrap justify-center'>\r\n\t\t\t{ robots.map( robot => <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} /> ) }\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className='ma4'>\r\n\t\t\t<input onChange={searchChange} type='text' placeholder='Search Robocops' />\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\" , height: \"500px\", border: \"3px solid midnightblue\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif (this.state.hasError) {\r\n\t\t\t\r\n\t\t\treturn (\r\n\r\n\t\t\t\t<h1 className = 'tc'>OOOOOOPPPPPPSSSSSS.....Something Went Wrong..</h1>\r\n\r\n\t\t\t\t);\r\n\t\t}   return this.props.children\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport 'tachyons';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n//class App extends Component {\r\n\r\n// replacing Class by function:\r\n\r\nfunction App() {\r\n\r\n//\tconstructor() {\r\n//\t\tsuper();\r\n//\t\tthis.state = {\r\n//\t\t\trobots: [],\r\n//\t\t\tsearchfield: ''\r\n//\t\t}\r\n//\t}\r\n\r\n//Adding useState hooks:\r\n\r\n\tconst [robots, setRobots] = useState([]);\r\n\tconst [searchfield, setSearchfield] = useState('');\r\n\r\n\r\n//\tcomponentDidMount() {\r\n//\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n//\t\t.then(response => response.json())\r\n//\t\t.then(users => {this.setState({ robots: users }) } )\r\n//\t}\r\n\r\n//  Adjusted lifecycle to hooks usage:\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => setRobots(users))\r\n\t},[]);\r\n\r\n \r\n//\tonSearchChange = (event) => {\r\n//\t\t\tthis.setState({ searchfield: event.target.value })\r\n//\t\t}\r\n\r\n//  Adjusted function to hooks usage:\r\n\r\n\tconst onSearchChange = (event) => {setSearchfield(event.target.value)}\r\n\r\n//\trender() {\r\n\r\n//\t\tconst { robots, searchfield } = this.state;\r\n\r\n\t\tvar filteredRobots = robots.filter((robot) => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase()) \r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\t\t\r\n\t\treturn ( \r\n\r\n \t\t\t<div className ='tc'>\r\n\r\n \t\t\t\t{ (!robots.length) \r\n \t\t\t\t\t? \r\n \t\t\t\t\t\t<div className = 'flex justify-center f4'>\r\n \t\t\t\t\t\t\t<h1>Loading....</h1>  \r\n \t\t\t\t\t\t</div>\r\n\r\n \t\t\t\t\t: \t\r\n\t\t\t \t\t\t<div className ='tc'>\r\n\t\t\t\t\t\t\t<h3 className='f1 ma3'>Robocops</h3>\r\n\t\t\t\t\t\t\t<Searchbox searchChange={onSearchChange}/>\r\n\t\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t\t\t<Cardlist robots={filteredRobots} />\r\n\t\t\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t \t\t\t</div>\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t);\t\t\t\t\r\n\r\n//\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}