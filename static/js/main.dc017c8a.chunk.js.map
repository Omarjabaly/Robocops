{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","robot","name","email","id","className","src","alt","Cardlist","robots","map","Searchbox","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","height","border","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","searchfield","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8NAoBeA,EAlBF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAGNC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAErB,OAEC,yBAAKC,UAAU,oDACV,yBAAKC,IAAG,+BAA0BF,EAA1B,kBAA8CG,IAAI,YAC1D,wBAAIF,UAAU,MAAMH,GACpB,wBAAIG,UAAU,aAAaF,KCGnBK,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACA,yBAAKJ,UAAU,iCACZI,EAAOC,KAAK,SAAAT,GAAK,OAAI,kBAAC,EAAD,CAAMA,MAAOA,SCQxBU,G,MAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEnB,OAEC,yBAAKP,UAAU,OACd,2BAAOQ,SAAUD,EAAcE,KAAK,OAAOC,YAAY,uBCM3CC,G,MAZA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAQ,QAASC,OAAQ,2BAC1DJ,EAAMK,YC0BKC,E,kDA3Bd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,UAAU,GAHE,E,8DAOIC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SAIb,wBAAIpB,UAAY,MAAhB,iDAGSuB,KAAKX,MAAMK,a,GAtBIQ,aCgEbC,E,kDAzDd,aAAe,IAAD,8BACb,gBACKP,MAAQ,CACZf,OAAQ,GACRuB,YAAa,IAJD,E,gEAQO,IAAD,OACnBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEpB,OAAQ4B,S,+BAI/B,IAAD,SAMwBT,KAAKJ,MAA7Bf,EANA,EAMAA,OAAQuB,EANR,EAMQA,YAEZM,EAAiB7B,EAAO8B,QAAO,SAACtC,GAClC,OAAOA,EAAMC,KAAKsC,cAAcC,SAAST,EAAYQ,kBAKvD,OAEE,yBAAKnC,UAAW,MAEXI,EAAOiC,OAOT,yBAAKrC,UAAW,MAChB,wBAAIA,UAAU,UAAd,YACA,kBAAC,EAAD,CAAWO,aAzBO,SAAC+B,GACvB,EAAKd,SAAS,CAAEG,YAAaW,EAAMC,OAAOC,WAyBtC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpC,OAAQ6B,OAVpB,yBAAKjC,UAAY,0BAChB,iD,GAtCUyB,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.dc017c8a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({robot}) => {\r\n\r\n\t\r\n\tconst { name, email, id } = robot;\r\n\t\r\n\treturn (\r\n\r\n\t\t<div className=\"tc w5 h10 ma2 ba bw1 b--purple br3 shadow-3 grow\">\r\n\t\t\t    <img src={`https://robohash.org/${id}.jpg?bgset=bg1`} alt=\"Robocop\" />\r\n\t\t\t    <h1 className=\"f3\">{name}</h1>\r\n\t\t\t    <h2 className=\"f6 normal\">{email}</h2>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'; \r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\t\treturn (\r\n\t\t<div className='flex flex-wrap justify-center'>\r\n\t\t\t{ robots.map( robot => <Card robot={robot} /> ) }\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className='ma4'>\r\n\t\t\t<input onChange={searchChange} type='text' placeholder='Search Robocops' />\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\" , height: \"500px\", border: \"3px solid midnightblue\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif (this.state.hasError) {\r\n\t\t\t\r\n\t\t\treturn (\r\n\r\n\t\t\t\t<h1 className = 'tc'>OOOOOOPPPPPPSSSSSS.....Something Went Wrong..</h1>\r\n\r\n\t\t\t\t);\r\n\t\t}   return this.props.children\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\nimport Cardlist from '../components/Cardlist';\nimport 'tachyons';\nimport Searchbox from '../components/Searchbox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => {this.setState({ robots: users }) } )\n\t}\n\n\t\n\trender() {\n\n\t\tconst onSearchChange = (event) => {\n\t\t\tthis.setState({ searchfield: event.target.value })\n\t\t}\n\n\t\tconst { robots, searchfield } = this.state;\n\n\t\tvar filteredRobots = robots.filter((robot) => {\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase()) \n\t\t\t\t}\n\t\t\t)\n\n\t\t\n\t\treturn ( \n\n \t\t\t<div className ='tc'>\n\n \t\t\t\t{ (!robots.length) \n \t\t\t\t\t? \n \t\t\t\t\t\t<div className = 'flex justify-center f4'>\n \t\t\t\t\t\t\t<h1>Loading....</h1>  \n \t\t\t\t\t\t</div>\n\n \t\t\t\t\t: \t\n\t\t\t \t\t\t<div className ='tc'>\n\t\t\t\t\t\t\t<h3 className='f1 ma3'>Robocops</h3>\n\t\t\t\t\t\t\t<Searchbox searchChange={onSearchChange}/>\n\t\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t\t\t<Cardlist robots={filteredRobots} />\n\t\t\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t \t\t\t</div>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t);\t\t\t\t\n\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}